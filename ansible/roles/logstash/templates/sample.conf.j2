# logstash config

input {
  file {
    type => "apache_access"
    path => "/var/log/apache2/other_vhosts_access*"
    start_position => beginning
	ignore_older => 0
  }
  file {
    type => "apache_error"
    path => "/var/log/apache2/error*"
    start_position => beginning
	ignore_older => 0 
  }
}

filter {
  if [type] == "apache_access" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}( \*\*%{POSINT:responsetime}\*\*)?" }
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
	  locale => "en"
    }
  }
  if [type] == "apache_error" {
    grok {
      patterns_dir => "./patterns"
      match => { "message" => "\[%{HTTPDATE:timestamp}\] \[%{WORD:severity}\] \[client %{IPORHOST:clientip}\] %{GREEDYDATA:message_remainder}" }
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
	  locale => "en"
    }
  }
  if [clientip]  {
    geoip {
      source => "clientip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
      convert => [ "responsetime", "integer" ]
      convert => [ "bytes", "integer" ]
    }
  }
}

output {
  elasticsearch { hosts => ["{{ logstash.elasticsearch.host }}:{{ logstash.elasticsearch.port }}"] }
  stdout { codec => rubydebug }
}

# eof