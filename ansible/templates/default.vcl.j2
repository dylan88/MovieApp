vcl 4.0;

# Default backend definition. Set this to point to your content server.
backend default {
  .host = "127.0.0.1";
  .port = "8080";
  .first_byte_timeout = 120s;
}


# Access control list for PURGE requests.
# Here you need to put the IP address of your web server
acl purge {
  "127.0.0.1";
  "localhost";
}


  # Respond to incoming requests.
  sub vcl_recv {

    # Only allow PURGE requests from IP addresses in the 'purge' ACL.
    if (req.method == "PURGE") {
      if (!client.ip ~ purge) {
        return (synth(405, "Not allowed."));
      }
      return (hash);
    }

    # Only allow BAN requests from IP addresses in the 'purge' ACL.
    if (req.method == "BAN") {
      # Same ACL check as above:
      if (!client.ip ~ purge) {
        return (synth(403, "Not allowed."));
      }

      # Logic for the ban
      {% for varnish_url in varnish_urls %}
      # Cache tag bans
      {% if loop.index == 1 %}
      if (req.http.Cache-Tags && req.http.source == "{{ varnish_url.name }}") {
        ban("obj.http.X-Ban-Drupal-Cache-Tags ~ " + req.http.Cache-Tags + " && obj.http.X-Ban-Host ~ {{ varnish_url.url }}");
      }
      {% else %}
      else if (req.http.Cache-Tags && req.http.source == "{{ varnish_url.name }}") {
          ban("obj.http.X-Ban-Drupal-Cache-Tags ~ " + req.http.Cache-Tags + " && obj.http.X-Ban-Host ~ {{ varnish_url.url }}");
      }
      {% endif %}
      else if (req.http.ban-path && req.http.source == "{{ varnish_url.name }}") {
          # One url ban
          ban("obj.http.X-Ban-Path == " + req.http.ban-path + " && obj.http.X-Ban-Host ~ {{ varnish_url.url }}");
      } else if (req.http.ban-everything && req.http.source == "{{ varnish_url.name }}") {
          # All urls bans
          ban("obj.http.X-Ban-Everything ~ All" + " && obj.http.X-Ban-Host ~ {{ varnish_url.url }}");
      }
      {%endfor%}
      else {
        return (synth(403, "Ban header missing."));
      }

      # Throw a synthetic page so the request won't go to the backend.
      return (synth(200, "Ban added."));
    }
    {% if varnish_basic_auth is defined %}
    if (! req.http.Authorization ~ "Basic {{ varnish_basic_auth | b64encode }}") {
      # This is checking for base64 encoded username:password combination
            return(synth(401, "Authentication required"));
      }
    unset req.http.Authorization;
    {% endif %}

    # Add an X-Forwarded-For header with the client IP address.
    if (req.restarts == 0) {
      if (req.http.X-Forwarded-For) {
        set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
      }
      else {
        set req.http.X-Forwarded-For = client.ip;
      }
    }

    # Only cache GET and HEAD requests (pass through POST requests).
    if (req.method != "GET" && req.method != "HEAD") {
      return (pass);
    }

    # Pass through any administrative or AJAX-related paths.
    if (req.url ~ "^/status\.php$" ||
      req.url ~ "^/update\.php$" ||
      req.url ~ "^/admin$" ||
      req.url ~ "^/admin/.*$" ||
      req.url ~ "^/flag/.*$" ||
      req.url ~ "^.*/ajax/.*$" ||
      req.url ~ "^.*/ahah/.*$") {
        return (pass);
      }

    # Removing cookies for static content so Varnish caches these files.
    if (req.url ~ "(?i)\.(pdf|asc|dat|txt|doc|xls|ppt|tgz|csv|png|gif|jpeg|jpg|ico|swf|css|js|svg)(\?.*)?$") {
      unset req.http.Cookie;
    }

    # Remove all cookies that Drupal doesn't need to know about. We explicitly
    # list the ones that Drupal does need, the SESS and NO_CACHE. If, after
    # running this code we find that either of these two cookies remains, we
    # will pass as the page cannot be cached.
    if (req.http.Cookie) {
      # 1. Append a semi-colon to the front of the cookie string.
      # 2. Remove all spaces that appear after semi-colons.
      # 3. Match the cookies we want to keep, adding the space we removed
      #    previously back. (\1) is first matching group in the regsuball.
      # 4. Remove all other cookies, identifying them by the fact that they have
      #    no space after the preceding semi-colon.
      # 5. Remove all spaces and semi-colons from the beginning and end of the
      #    cookie string.
      set req.http.Cookie = ";" + req.http.Cookie;
      set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
      set req.http.Cookie = regsuball(req.http.Cookie, ";(SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE)=", "; \1=");
      set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
      set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

      if (req.http.Cookie == "") {
        # If there are no remaining cookies, remove the cookie header. If there
        # aren't any cookie headers, Varnish's default behavior will be to cache
        # the page.
        unset req.http.Cookie;
      }
      else {
        # If there is any cookies left (a session or NO_CACHE cookie), do not
        # cache the page. Pass it on to Apache directly.
        return (pass);
      }
    }
  }

  # Set a header to track a cache HITs and MISSes.
    sub vcl_deliver {
      {% if varnish_debug_mode == true %}
        # Debug headers
        if (obj.hits > 0) {
          set resp.http.X-varnish-cache = "HIT";
        }
        else {
          set resp.http.X-varnish-cache = "MISS";
        }
      {% else %}
        unset resp.http.X-Ban-Path;
        unset resp.http.X-Ban-Host;
        unset resp.http.Cache-Tags;
        unset resp.http.X-Drupal-Cache-Contexts;
        unset resp.http.X-Ban-Drupal-Cache-Tags;
        unset resp.http.X-Ban-Everything;
        unset resp.http.Server;
        unset resp.http.Via;
        unset resp.http.X-Varnish;
        unset resp.http.X-Generator;
        unset resp.http.X-Drupal-Dynamic-Cache;
        unset resp.http.X-Drupal-Cache;
      {% endif %}
    }


  # Instruct Varnish what to do in the case of certain backend responses (beresp).
  sub vcl_backend_response {

    # Set ban-lurker friendly custom headers.
    set beresp.http.X-Ban-Path = bereq.url;
    set beresp.http.X-Ban-Host = bereq.http.host;
    set beresp.http.X-Ban-Drupal-Cache-Tags = beresp.http.Cache-Tags;
    set beresp.http.X-Ban-Everything = "all";


    # Cache 404s, 301s, at 500s with a short lifetime to protect the backend.
    if (beresp.status == 404 || beresp.status == 301 || beresp.status == 500) {
      set beresp.ttl = 30s;
    }

    # Don't allow static files to set cookies.
    # (?i) denotes case insensitive in PCRE (perl compatible regular expressions).
    # This list of extensions appears twice, once here and again in vcl_recv so
    # make sure you edit both and keep them equal.
    if (bereq.url ~ "(?i)\.(pdf|asc|dat|txt|doc|xls|ppt|tgz|csv|png|gif|jpeg|jpg|ico|swf|css|js|svg)(\?.*)?$") {
        unset beresp.http.set-cookie;
    }

    # Allow items to remain in cache up to 6 hours past their cache expiration.
    set beresp.grace = 6h;

    # Disable buffering only for BigPipe responses
    if (beresp.http.Surrogate-Control ~ "BigPipe/1.0") {
        set beresp.do_stream = true;
        set beresp.ttl = 0s;
    }
  }

  sub vcl_synth {
      if (resp.status == 301 || resp.status == 302) {
          set resp.http.location = req.http.location;
          return (deliver);
      }
      {% if varnish_basic_auth is defined %}
      if (resp.status == 401) {
          set resp.status = 401;
          set resp.http.WWW-Authenticate = "Basic";
          return(deliver);
      }
      {% endif %}
  }

